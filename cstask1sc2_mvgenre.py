# -*- coding: utf-8 -*-
"""cstask1_mvgenreipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bWEWHfSydXeP0M3EVhosGPNKSS2o-JCc

# **training the model**
"""

import pandas as pd
import numpy as np
df = pd.read_csv("C:\\Users\\Faiz Ahmed\\OneDrive\\Desktop\\CODSOFT\\TASK1_mvgenre\\datasets\\output_dataset.csv")
df

y = df['GENRE']
x = df.drop('GENRE', axis=1)
y
x

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
x_train
x_test
y_train
y_test

from sklearn.feature_extraction.text import TfidfVectorizer
# Combine 'TITLE' and 'DESCRIPTION' for better feature extraction
x_train['text'] = x_train['TITLE'] + ' ' + x_train['DESCRIPTION']
x_test['text'] = x_test['TITLE'] + ' ' + x_test['DESCRIPTION']

# Create and fit the vectorizer on the combined text data
vectorizer = TfidfVectorizer(max_features=5000)
x_train_vec = vectorizer.fit_transform(x_train['text'])
x_test_vec = vectorizer.transform(x_test['text'])

from sklearn.naive_bayes import GaussianNB
x_train_vec = x_train_vec.toarray()
x_test_vec = x_test_vec.toarray()
nb_model = GaussianNB()
nb_model.fit(x_train_vec, y_train)

x_train_vec = nb_model.predict(x_train_vec)
x_test_vec = nb_model.predict(x_test_vec)
x_train_vec
x_test_vec

from sklearn.metrics import accuracy_score
accuracy_score(y_train, x_train_vec)
accuracy_score(y_test, x_test_vec)
taccuracy = accuracy_score(y_train, x_train_vec)
accuracy = accuracy_score(y_test, x_test_vec)
df = pd.DataFrame({'Actual': y_test, 'Predicted': x_test_vec})
df
nb_model_results = pd.DataFrame([{'ModelName ': 'GaussianNB', 'Train': taccuracy,'Test': accuracy}])
nb_model_results

from sklearn.feature_extraction.text import TfidfVectorizer
# Combine 'TITLE' and 'DESCRIPTION' for better feature extraction
x_train['text'] = x_train['TITLE'] + ' ' + x_train['DESCRIPTION']
x_test['text'] = x_test['TITLE'] + ' ' + x_test['DESCRIPTION']

# Create and fit the vectorizer on the combined text data
vectorizer_lr = TfidfVectorizer(max_features=5000)
x_train_vec_lr = vectorizer.fit_transform(x_train['text'])
x_test_vec_lr = vectorizer.transform(x_test['text'])

from sklearn.linear_model import LogisticRegression
lr_model = LogisticRegression(solver='saga',max_iter=1000)
lr_model.fit(x_train_vec_lr, y_train)

x_train_pred_lr = lr_model.predict(x_train_vec_lr)  # Renamed to x_train_pred_svm
x_test_pred_lr = lr_model.predict(x_test_vec_lr)
x_train_pred_lr
x_test_pred_lr

from sklearn.metrics import accuracy_score
taccuracy_lr = accuracy_score(y_train, x_train_pred_lr)  # Renamed to taccuracy_svm
accuracy_lr = accuracy_score(y_test, x_test_pred_lr)  # Renamed to accuracy_svm
lr_model_results = pd.DataFrame([{'ModelName ': 'LR', 'Train': taccuracy_lr, 'Test': accuracy_lr}])
lr_model_results

from sklearn.feature_extraction.text import TfidfVectorizer

# Combine 'TITLE' and 'DESCRIPTION' for better feature extraction
x_train['text'] = x_train['TITLE'] + ' ' + x_train['DESCRIPTION']
x_test['text'] = x_test['TITLE'] + ' ' + x_test['DESCRIPTION']

# Create and fit the vectorizer on the combined text data
vectorizer_svm = TfidfVectorizer(max_features=5000)  # Renamed to vectorizer_svm
x_train_vec_svm = vectorizer_svm.fit_transform(x_train['text'])  # Renamed to x_train_vec_svm
x_test_vec_svm = vectorizer_svm.transform(x_test['text'])  # Renamed to x_test_vec_svm

from sklearn.svm import LinearSVC
svm_model = LinearSVC(dual=False, max_iter=10000)
svm_model.fit(x_train_vec_svm, y_train)

x_train_pred_svm = svm_model.predict(x_train_vec_svm)  # Renamed to x_train_pred_svm
x_test_pred_svm = svm_model.predict(x_test_vec_svm)
x_train_pred_svm
x_test_pred_svm

from sklearn.metrics import accuracy_score
taccuracy_svm = accuracy_score(y_train, x_train_pred_svm)  # Renamed to taccuracy_svm
accuracy_svm = accuracy_score(y_test, x_test_pred_svm)  # Renamed to accuracy_svm
svm_model_results = pd.DataFrame([{'ModelName ': 'SVM', 'Train': taccuracy_svm, 'Test': accuracy_svm}])
svm_model_results

df_results = pd.concat([nb_model_results, lr_model_results, svm_model_results], ignore_index=True)
df_results.index = [1,2,3]
df_results

"""# **making predictions for a test set**"""

import pandas as pd

test_df = pd.read_csv("C:\\Users\\Faiz Ahmed\\OneDrive\\Desktop\\CODSOFT\\TASK1_mvgenre\\datasets\\out_dataset.csv")  # Replace with your test dataset file
solutions_df = pd.read_csv("C:\\Users\\Faiz Ahmed\\OneDrive\\Desktop\\CODSOFT\\TASK1_mvgenre\\datasets\\outsol_dataset.csv")  # Replace with your solutions dataset file
test_df
solutions_df

from sklearn.feature_extraction.text import TfidfVectorizer
# Combine 'TITLE' and 'DESCRIPTION' for better feature extraction
x_train['text'] = x_train['TITLE'] + ' ' + x_train['DESCRIPTION']
x_test['text'] = x_test['TITLE'] + ' ' + x_test['DESCRIPTION']

# Create and fit the vectorizer on the combined text data
vectorizer = TfidfVectorizer(max_features=5000)
x_train_vec = vectorizer.fit_transform(x_train['text'])
x_test_vec = vectorizer.transform(x_test['text'])

# Assuming 'text' column contains the combined 'TITLE' and 'DESCRIPTION'
test_df['text'] = test_df['TITLE'] + ' ' + test_df['DESCRIPTION']
# Fill NaN values in 'text' with an empty string before transformation
test_df['text'] = test_df['text'].fillna('')
x_test_new = vectorizer.transform(test_df['text']) # 'vectorizer' should be the same one used for training

predictions = lr_model.predict(x_test_new)
predictions

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(solutions_df['GENRE'], predictions)
print(f"Accuracy on the test dataset: {accuracy}")

     # Create a DataFrame for comparison
comparison_df = pd.DataFrame({'Actual': solutions_df['GENRE'], 'Predicted': predictions})
print(comparison_df)